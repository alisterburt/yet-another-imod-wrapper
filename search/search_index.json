{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This package aims to provide a simple API for aligning tilt-series using  IMOD in Python and from the command-line.</p> <p> </p> Aligning a tilt-series involves modelling how a 3D specimen  is projected into 2D. Reproduced from a paper by David  Mastronarde."},{"location":"#why-does-this-exist","title":"Why does this exist?","text":"<p>IMOD is a powerful software package with a  huge API surface. Setting up batchruntomo can be tricky for those unfamiliar with IMOD and taking the results into downstream  tools for further processing requires a deep understanding of IMOD's metadata model.</p> <p>Covering only the use cases of single-axis cryo-TEM tilt-series alignment,  this package aims to provide a simple way to align tilt-series and work with IMOD  metadata for cryo-ET practitioners more familiar with Python and shell scripting  than IMOD.</p>"},{"location":"#usage","title":"Usage","text":"<p>I want to...</p> <ul> <li>align a tilt-series with fiducials in Python</li> <li>align a tilt-series with patch-tracking in Python</li> <li>align a tilt-series with fiducials from the command-line</li> <li>align a tilt-series with patch-tracking from the command-line</li> <li>work with IMOD metadata in Python</li> </ul>"},{"location":"#further-reading","title":"Further reading","text":"<ul> <li>IMOD tomography guide</li> <li>Fiducial Marker and Hybrid Alignment Methods for Single- and Double-axis Tomography</li> </ul>"},{"location":"fiducials/cli/","title":"Command-Line","text":"<pre><code>$ yet-another-imod-wrapper fiducials\n</code></pre> <pre><code> Usage: yet-another-imod-wrapper fiducials [OPTIONS]                                                                                                                                 \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --tilt-series                   PATH   file containing tilt-series in MRC format. [default: None] [required]                                                                   \u2502\n\u2502 *  --tilt-angles                   PATH   text file containing tilt-angles, one per line. [default: None] [required]                                                              \u2502\n\u2502 *  --output-directory              PATH   directory for IMOD output. [default: None] [required]                                                                                   \u2502\n\u2502 *  --pixel-size                    FLOAT  pixel spacing in \u00c5ngstroms. [default: None] [required]                                                                                  \u2502\n\u2502 *  --fiducial-size                 FLOAT  fiducial diameter in nanometers. [default: None] [required]                                                                             \u2502\n\u2502 *  --nominal-rotation-angle        FLOAT  in-plane rotation of tilt-axis away from the Y-axis in degrees, CCW positive. [default: None] [required]                                \u2502\n\u2502    --basename                      TEXT   basename for files in output directory. [default: None]                                                                                 \u2502\n\u2502    --help                                 Show this message and exit.                                                                                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"fiducials/python/","title":"Python","text":"<pre><code>import mrcfile\nimport numpy as np\nfrom yet_another_imod_wrapper import align_tilt_series_using_fiducials\n\n# load tilt series into (batch, h, w) numpy array\ntilt_series = mrcfile.read('my_tilt_series.mrc')\n\n# align using fiducials\noutput = align_tilt_series_using_fiducials(\n    tilt_series=tilt_series,\n    tilt_angles=np.arange(-60, 63, 3),\n    pixel_size=1.35,\n    fiducial_size=10,\n    nominal_rotation_angle=85,\n    basename='my_tilt_series',\n    output_directory='fiducials',\n    skip_if_completed=False\n)\n</code></pre>"},{"location":"metadata/handlers/","title":"Handlers","text":"<p>This module contains some tools which simplify working with IMOD alignment metadata  from Python.</p>"},{"location":"metadata/handlers/#yet_another_imod_wrapper.utils.etomo.EtomoOutput","title":"<code>yet_another_imod_wrapper.utils.etomo.EtomoOutput</code>","text":"<p>Convenient retrieval of outputs from an Etomo alignment project.</p> <p>For details see the source code.</p> Source code in <code>yet_another_imod_wrapper/utils/etomo.py</code> <pre><code>class EtomoOutput:\n\"\"\"Convenient retrieval of outputs from an Etomo alignment project.\n\n    For details see the source code.\n    \"\"\"\n    def __init__(self, basename: str, directory: Path):\n        self.directory: Path = directory\n        self.basename: str = basename\n\n    @property\n    def tilt_series_file(self) -&gt; Path:\n        return self.directory / f'{self.basename}.mrc'\n\n    @property\n    def rawtlt_file(self) -&gt; Path:\n        return self.directory / f'{self.basename}.rawtlt'\n\n    @property\n    def xf_file(self) -&gt; Path:\n        return self.directory / f'{self.basename}.xf'\n\n    @property\n    def tlt_file(self) -&gt; Path:\n        return self.directory / f'{self.basename}.tlt'\n\n    @property\n    def edf_file(self) -&gt; Path:\n        return self.directory / f'{self.basename}.edf'\n\n    @property\n    def align_log_file(self) -&gt; Path:\n        return self.directory / 'align.log'\n\n    @property\n    def is_ready_for_alignment(self) -&gt; bool:\n        return self.tilt_series_file.exists() and self.rawtlt_file.exists()\n\n    @property\n    def contains_alignment_results(self) -&gt; bool:\n        return self.xf_file.exists() and self.tlt_file.exists()\n</code></pre>"},{"location":"metadata/handlers/#yet_another_imod_wrapper.utils.xf.XF","title":"<code>yet_another_imod_wrapper.utils.xf.XF</code>","text":"<p>Convenient retrieval of properties from IMOD xf data.</p> <p>An xf file contains one line with six numbers per image in the tilt-series, each specifying a linear transformation:</p> <pre><code>A11 A12 A21 A22 DX DY\n</code></pre> <p>where the coordinate <code>(X, Y)</code> is transformed to <code>(X', Y')</code> by:</p> <pre><code>X' = A11 * X + A12 * Y + DX\nY' = A21 * X + A22 * Y + DY\n</code></pre> <p>The rotation center in IMOD is at <code>(N-1) / 2</code> where <code>N</code> is the number of elements in each dimension. This calculates a 0-indexed coordinate.</p> Source code in <code>yet_another_imod_wrapper/utils/xf.py</code> <pre><code>class XF:\n\"\"\"Convenient retrieval of properties from IMOD xf data.\n\n    An xf file contains one line with six numbers per image in the tilt-series,\n    each specifying a linear transformation:\n\n        A11 A12 A21 A22 DX DY\n\n    where the coordinate `(X, Y)` is transformed to `(X', Y')` by:\n\n        X' = A11 * X + A12 * Y + DX\n        Y' = A21 * X + A22 * Y + DY\n\n    The rotation center in IMOD is at `(N-1) / 2` where `N` is the\n    number of elements in each dimension. This calculates a 0-indexed\n    coordinate.\n    \"\"\"\n\n    def __init__(\n        self,\n        xf: np.ndarray,\n        initial_tilt_axis_rotation_angle: Optional[float] = None\n    ):\n        self.xf_data = xf\n        self.initial_tilt_axis_rotation_angle = initial_tilt_axis_rotation_angle\n\n    @classmethod\n    def from_file(\n        cls,\n        filename: os.PathLike,\n        initial_tilt_axis_rotation_angle: float = None\n    ):\n        return cls(read_xf(filename), initial_tilt_axis_rotation_angle)\n\n    @property\n    def shifts(self) -&gt; np.ndarray:\n\"\"\"`(n, 2)` array of `(DX, DY)` from xf data.\n\n        These shifts are applied **after** rotation/skew.\n        \"\"\"\n        return self.xf_data[:, -2:]\n\n    @property\n    def transformation_matrices(self) -&gt; np.ndarray:\n\"\"\"`(n, 2, 2)` array containing `A11, A12, A21, A22` from xf data.\"\"\"\n        return self.xf_data[:, :4].reshape((-1, 2, 2))\n\n    @property\n    def in_plane_rotations(self) -&gt; np.ndarray:\n\"\"\"`(n, )` array of in plane rotation angles from xf data.\n\n        Angles are in degrees and counter-clockwise angles are positive.\n        \"\"\"\n        cos_theta = self.transformation_matrices[:, 0, 0]\n        theta = np.rad2deg(np.arccos(cos_theta))\n        if self.initial_tilt_axis_rotation_angle is None:\n            warn(\n                'no initial value provided for tilt-axis angle was \\\n                provided and there are multiple valid solutions  \\\n                for the requested in-plane rotation angle.'\n            )\n        else:\n            initial_theta = self.initial_tilt_axis_rotation_angle\n            difference = np.abs(initial_theta - theta).sum()\n            flipped_difference = np.abs((-1 * initial_theta) - theta).sum()\n            if flipped_difference &lt; difference:\n                theta = -1 * theta\n        return theta\n\n    @property\n    def image_shifts(self) -&gt; np.ndarray:\n\"\"\"`(n, 2)` array of xy shifts aligning tilt-images with the projected specimen.\n\n        Rotation center is in IMOD convention `(N-1) / 2`.\n        \"\"\"\n        inverse_transformation_matrices = np.linalg.pinv(self.transformation_matrices)\n        return np.squeeze(inverse_transformation_matrices @ self.shifts.reshape((-1, 2, 1)))\n\n    @property\n    def specimen_shifts(self) -&gt; np.ndarray:\n\"\"\"`(n, 2)` array of xy shifts aligning the projected specimen with tilt-images.\n\n        Rotation center is in IMOD convention `(N-1) / 2`.\n        \"\"\"\n        return -self.image_shifts\n</code></pre>"},{"location":"metadata/handlers/#yet_another_imod_wrapper.utils.xf.XF.shifts","title":"<code>shifts: np.ndarray</code>  <code>property</code>","text":"<p><code>(n, 2)</code> array of <code>(DX, DY)</code> from xf data.</p> <p>These shifts are applied after rotation/skew.</p>"},{"location":"metadata/handlers/#yet_another_imod_wrapper.utils.xf.XF.transformation_matrices","title":"<code>transformation_matrices: np.ndarray</code>  <code>property</code>","text":"<p><code>(n, 2, 2)</code> array containing <code>A11, A12, A21, A22</code> from xf data.</p>"},{"location":"metadata/handlers/#yet_another_imod_wrapper.utils.xf.XF.in_plane_rotations","title":"<code>in_plane_rotations: np.ndarray</code>  <code>property</code>","text":"<p><code>(n, )</code> array of in plane rotation angles from xf data.</p> <p>Angles are in degrees and counter-clockwise angles are positive.</p>"},{"location":"metadata/handlers/#yet_another_imod_wrapper.utils.xf.XF.image_shifts","title":"<code>image_shifts: np.ndarray</code>  <code>property</code>","text":"<p><code>(n, 2)</code> array of xy shifts aligning tilt-images with the projected specimen.</p> <p>Rotation center is in IMOD convention <code>(N-1) / 2</code>.</p>"},{"location":"metadata/handlers/#yet_another_imod_wrapper.utils.xf.XF.specimen_shifts","title":"<code>specimen_shifts: np.ndarray</code>  <code>property</code>","text":"<p><code>(n, 2)</code> array of xy shifts aligning the projected specimen with tilt-images.</p> <p>Rotation center is in IMOD convention <code>(N-1) / 2</code>.</p>"},{"location":"metadata/io/","title":"File I/O","text":""},{"location":"metadata/io/#yet_another_imod_wrapper.utils.io","title":"<code>yet_another_imod_wrapper.utils.io</code>","text":""},{"location":"metadata/io/#yet_another_imod_wrapper.utils.io.read_xf","title":"<code>read_xf(file: os.PathLike) -&gt; np.ndarray</code>","text":"<p>Read an IMOD xf file into an (n, 6) numpy array.</p> <p>An xf file contains one line with six numbers per image in the tilt-series, each specifying a linear transformation:</p> <pre><code>A11 A12 A21 A22 DX DY\n</code></pre> <p>where the coordinate (X, Y) is transformed to (X', Y') by:</p> <pre><code>X' = A11 * X + A12 * Y + DX\nY' = A21 * X + A22 * Y + DY\n</code></pre> Source code in <code>yet_another_imod_wrapper/utils/io.py</code> <pre><code>def read_xf(file: os.PathLike) -&gt; np.ndarray:\n\"\"\"Read an IMOD xf file into an (n, 6) numpy array.\n\n    An xf file contains one line with six numbers per image in the tilt-series,\n    each specifying a linear transformation:\n\n        A11 A12 A21 A22 DX DY\n\n    where the coordinate (X, Y) is transformed to (X', Y') by:\n\n        X' = A11 * X + A12 * Y + DX\n        Y' = A21 * X + A22 * Y + DY\n    \"\"\"\n    return np.loadtxt(fname=file, dtype=float).reshape((-1, 6))\n</code></pre>"},{"location":"metadata/io/#yet_another_imod_wrapper.utils.io.read_tlt","title":"<code>read_tlt(file: os.PathLike) -&gt; np.ndarray</code>","text":"<p>Read an IMOD tlt file into an (n, ) numpy array.</p> Source code in <code>yet_another_imod_wrapper/utils/io.py</code> <pre><code>def read_tlt(file: os.PathLike) -&gt; np.ndarray:\n\"\"\"Read an IMOD tlt file into an (n, ) numpy array.\n\n\n    \"\"\"\n    return np.loadtxt(fname=file, dtype=float).reshape(-1)\n</code></pre>"},{"location":"metadata/io/#model-files","title":"Model files","text":"<p>Support for reading model (<code>.mod</code>) files is provided in a separate package  imodmodel. [repo, docs]</p>"},{"location":"patch-tracking/cli/","title":"Command-Line","text":"<pre><code>$ yet-another-imod-wrapper patch-tracking\n</code></pre> <pre><code> Usage: yet-another-imod-wrapper patch-tracking [OPTIONS]                                                                                                                            \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --tilt-series                     PATH   file containing tilt-series in MRC format. [default: None] [required]                                                                 \u2502\n\u2502 *  --tilt-angles                     PATH   text file containing tilt-angles, one per line. [default: None] [required]                                                            \u2502\n\u2502 *  --output-directory                PATH   directory for IMOD output. [default: None] [required]                                                                                 \u2502\n\u2502 *  --pixel-size                      FLOAT  pixel spacing in \u00c5ngstroms. [default: None] [required]                                                                                \u2502\n\u2502    --patch-size                      FLOAT  patch sidelength in \u00c5ngstroms. [default: 500]                                                                                         \u2502\n\u2502    --patch-overlap-percentage        FLOAT  percentage of tile-length to overlap on each side. [default: 33]                                                                      \u2502\n\u2502 *  --nominal-rotation-angle          FLOAT  in-plane rotation of tilt-axis away from the Y-axis in degrees, CCW positive. [default: None] [required]                              \u2502\n\u2502    --basename                        TEXT   basename for files in output directory. [default: None]                                                                               \u2502\n\u2502    --help                                   Show this message and exit.                                                                                                           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"patch-tracking/python/","title":"Python","text":"<pre><code>import mrcfile\nimport numpy as np\nfrom yet_another_imod_wrapper import align_tilt_series_using_patch_tracking\n\n# load tilt series into (batch, h, w) numpy array\ntilt_series = mrcfile.read('my_tilt_series.mrc')\n\n# align using patch-tracking\nalign_tilt_series_using_patch_tracking(\n    tilt_series=tilt_series,\n    tilt_angles=np.arange(-60, 63, 3),\n    pixel_size=1.35,\n    patch_size=1000,\n    patch_overlap_percentage=33,\n    basename='my_tilt_series',\n    output_directory='patch_tracking',\n    skip_if_completed=False\n)\n</code></pre>"}]}